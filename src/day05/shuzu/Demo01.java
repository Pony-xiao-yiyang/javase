package day05.shuzu;

/**
 * @author: Adolf.Linus
 * @date: 2023/11/16
 * @time: 17:56
 * @function:
 * @since:
 * @version:
 * @description:数组
 * @email ponyxiaoyiyang@gmail.com
 */
public class Demo01 {
    public static void main(String[] args) {
        /**
         *
         * 方式一：
         *
         *    数组
         *      数组储存的数据类型[]数组名字 =  new 数组储存的数据类型;
         *
         *
         *
         *
         * 数组的定义格式详解
         *      数组存储的数据类型：创建的数组容器可以存储什么数据类型。
         *      []：表示数组
         *      数组名字：为定义的数组起一个变量名，满足标识符规范，可以使用名字操作数组
         *      new:关键字，创建数组使用的关键字
         *      数组存储的数据类型：创建的数组容器可以存储什么数据类型
         *      [长度]:数组的长度，表示数组容器中可以存储多少个元素
         *      注意：数组有定长特性，长度一旦制定，不可更改
         *              *和水杯道理相同，买了一个2升的水杯，总容量就是2升，不能多也不能少
         *
         *      eg:
         *          定义可以存储的3个整数的数组容器，代码如下:
         *              int[]arr = new int[3];
         *
         *
         *
         * 方式二：
         *      数据类型[]数组名 = new 数据类型[]{元素1,元素2,.....};
         *
         *     eg:int[]arr = new int[]{1,2,3,4,5};
         *
         *
         * 方式三:
         *      数据类型[]数组名 = {元素1,元素2,元素3,.......};
         *
         *      eg：int[]arr = {1,2,3,4,5};
         *
         *
         *
         *
         * 数组的访问
         *
         *      索引：
         *          每一个存储到数组的元素，都会自动的拥有一个编号，从0开始，这个自动编号称为数组索引(index)，可以通过数组的索引访问数组中的元素
         *
         *          格式：
         *              数值名[索引]
         *          数组的长度属性:
         *              每个数组都具有长度，而且都是固定的，Java中赋予了数组的一个属性，可以获取到数组的长度，语句为：数组名.length,属性length
         *              的执行结果是数组的长度，int类型的结果，由次可以推断出，数组的最大索引值为数组名.length-1。
         *
         */
        int[] arr = new int[]{1, 2, 3, 4, 5};
        //打印数组属性，输出结果s
        System.out.println(arr.length);
        /**
         * 索引访问数组中的元素
         *  数组名[索引]=数值，为数组中的元素赋值
         *  变量=数组名[索引]，获取出数组中的元素
         *
         */
        //定义存储int类型数组，赋值元素1,2,3,4,5
        int[]arr1= {1,2,3,4,5};
        //为0索引元素赋值为6
        arr1[0] = 6;
        //获取数组0索引上的元素
        int i = arr1[0];
        System.out.println(i);
        //直接输出数组0索引元素
        System.out.println(arr1[0]);
    }
}
